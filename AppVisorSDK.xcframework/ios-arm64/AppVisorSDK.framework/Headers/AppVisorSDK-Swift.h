#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef APPVISORSDK_SWIFT_H
#define APPVISORSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AppVisorSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

enum AVPErrorCode : NSInteger;
@class NSString;
@class NSError;
SWIFT_CLASS("_TtC11AppVisorSDK8AVPError")
@interface AVPError : NSObject
@property (nonatomic, readonly) enum AVPErrorCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithCode:(enum AVPErrorCode)code error:(NSError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AVPErrorCode, open) {
  AVPErrorCodeNetworkError = 0,
  AVPErrorCodeInvalidData = 1,
  AVPErrorCodeRequestError = 2,
  AVPErrorCodeUnknownError = 3,
  AVPErrorCodeDeviceNotSupported = 4,
  AVPErrorCodeUserOptedOut = 5,
  AVPErrorCodeTokenGenerationFailed = 6,
  AVPErrorCodeInvalidPermission = 7,
};

@class DynamoDBAttributeValue;
SWIFT_CLASS_NAMED("AVPLastKey")
@interface AVPLastKey : NSObject
@property (nonatomic, readonly, strong) DynamoDBAttributeValue * _Nonnull messageId;
@property (nonatomic, readonly, strong) DynamoDBAttributeValue * _Nonnull userUuid;
- (nonnull instancetype)initWithMessageId:(DynamoDBAttributeValue * _Nonnull)messageId userUuid:(DynamoDBAttributeValue * _Nonnull)userUuid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS_NAMED("AVPNeedsReviewResponse")
@interface AVPNeedsReviewResponse : NSObject
@property (nonatomic, readonly) BOOL needReview;
- (nonnull instancetype)initWithNeedReview:(BOOL)needReview OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS_NAMED("AVPNotice")
@interface AVPNotice : NSObject
@property (nonatomic, copy) NSString * _Nonnull userUuid;
@property (nonatomic) NSInteger timestamp;
@property (nonatomic) NSInteger messageId;
@property (nonatomic, copy) NSString * _Nonnull pushTitle;
@property (nonatomic, copy) NSString * _Nonnull pushBody;
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic) BOOL readStatus;
@property (nonatomic, copy) NSString * _Nullable parameterW;
@property (nonatomic, copy) NSString * _Nullable parameterX;
@property (nonatomic, copy) NSString * _Nullable parameterY;
@property (nonatomic, copy) NSString * _Nullable parameterZ;
- (nonnull instancetype)initWithUserUuid:(NSString * _Nonnull)userUuid timestamp:(NSInteger)timestamp messageId:(NSInteger)messageId pushTitle:(NSString * _Nonnull)pushTitle pushBody:(NSString * _Nonnull)pushBody url:(NSString * _Nonnull)url readStatus:(BOOL)readStatus parameterW:(NSString * _Nullable)parameterW parameterX:(NSString * _Nullable)parameterX parameterY:(NSString * _Nullable)parameterY parameterZ:(NSString * _Nullable)parameterZ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS_NAMED("AVPNoticesResponse")
@interface AVPNoticesResponse : NSObject
@property (nonatomic, readonly, copy) NSArray<AVPNotice *> * _Nonnull data;
@property (nonatomic, readonly, strong) AVPLastKey * _Nullable lastKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithData:(NSArray<AVPNotice *> * _Nonnull)data lastKey:(AVPLastKey * _Nullable)lastKey message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC11AppVisorSDK9AVPResult")
@interface AVPResult : NSObject
@property (nonatomic, readonly) BOOL isSuccess;
@property (nonatomic, readonly, strong) AVPError * _Nullable error;
- (nonnull instancetype)initWithIsSuccess:(BOOL)isSuccess error:(AVPError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC11AppVisorSDK8Appvisor")
@interface Appvisor : NSObject <WKUIDelegate>
@property (nonatomic, copy) NSString * _Null_unspecified appvisorUDID;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) Appvisor * _Nonnull sharedInstance;)
+ (Appvisor * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(Appvisor * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface Appvisor (SWIFT_EXTENSION(AppVisorSDK))
/// This function requests an app review from the user using the standard StoreKit interface.
+ (void)requestAppReviewWithCompletion:(void (^ _Nonnull)(AVPNeedsReviewResponse * _Nullable, NSError * _Nullable))completion;
@end

@class UNNotification;
@class UIView;
@class AppvisorCustomAlertView;
@class UNMutableNotificationContent;
@class UNNotificationContent;
@interface Appvisor (SWIFT_EXTENSION(AppVisorSDK))
- (BOOL)checkRichURLFrom:(UNNotification * _Nullable)notification SWIFT_WARN_UNUSED_RESULT;
- (void)showMovieRichPush:(UNNotification * _Nonnull)notification in:(UIView * _Nonnull)view;
- (void)showImageFrom:(UNNotification * _Nonnull)notification in:(UIView * _Nonnull)view;
- (void)showWebSiteFrom:(UNNotification * _Nonnull)notification in:(UIView * _Nonnull)view;
- (AppvisorCustomAlertView * _Nullable)showAlertFor:(UNNotification * _Nonnull)notification with:(void (^ _Nonnull)(void))cancelAction and:(void (^ _Nonnull)(void))goAction SWIFT_WARN_UNUSED_RESULT;
- (void)handleContent:(UNMutableNotificationContent * _Nonnull)originalContent withHandler:(void (^ _Nonnull)(UNNotificationContent * _Nonnull))contentHandler;
@end

@class NSData;
@interface Appvisor (SWIFT_EXTENSION(AppVisorSDK))
/// This function enables push notifications with the provided <code>appID</code> and debug setting.
/// \code
/// By default, this function enables text, badge, and sound for push notifications.
/// If `isDebug` is `true`, debug mode is enabled.
///
/// - Parameters:
/// - appID: The application identifier string used for push notifications.
/// - isDebug: A boolean value indicating whether to run in debug mode.
///
/// # Usage Example: #
/// ```swift
/// enablePush(with: "com.yourcompany.yourapp", isDebug: true)
/// ```
///
/// \endcode
- (void)enablePushWith:(NSString * _Nonnull)appID isDebug:(BOOL)isDebug;
/// This function tracks a push notification event and performs several actions based on the provided launch options.
/// The function first checks if the device supports the AppVisor Push SDK.
/// If it does not, it returns without performing any further actions.
/// If debug mode is enabled, it logs the launch options.
/// The function then checks if the launch options contain a <code>pushID</code> (<code>"c"</code> key).
/// If they do, it checks if this <code>pushID</code> is the same as the <code>prePushID</code> from <code>Appvisor</code>.
/// If it is, the function returns without performing any further actions.
/// If the <code>pushID</code> is different, the function sets the <code>prePushID</code> to this new <code>pushID</code>.
/// If the launch options contain a URL (<code>"u"</code> key), the function opens this URL.
/// The function then constructs a parameters dictionary with various data,
/// including the <code>appKey</code> from <code>Appvisor</code>, the <code>deviceUDID</code> from <code>AppvisorUtil</code>, and the <code>pushID</code>
/// from the launch options. It sends these parameters to the server.
/// <h1>Note:</h1>
/// This function should be called whenever a push notification is received
/// in order to track the notification and perform actions based on its content.
/// \param launchOptions A dictionary containing information about a remote notification,
/// possibly one that caused the launch of the app.
///
///
/// throws:
/// This function does not throw any errors.
///
/// returns:
/// No return value.
- (void)trackPushWith:(NSDictionary<NSString *, id> * _Nullable)launchOptions;
/// This function registers a device token for remote push notifications.
/// The function first checks if the device supports the AppVisor Push SDK.
/// If it does not, it returns without performing any further actions.
/// If the application is currently opted out of push notifications (<code>optOut == true</code>),
/// the function also returns without performing any further actions.
/// The function then converts the <code>data</code> parameter to a string token.
/// This conversion involves casting the data to <code>UInt32</code> and formatting it as a string.
/// If the string token is not empty, the function checks if there’s an existing push status in the user defaults.
/// If there isn’t, it sets the push status to <code>"1"</code>.
/// The function then encrypts the token using AES256 encryption
/// band saves it to the user defaults under the <code>APPVISOR_PUSH_TOKEN</code> key.
/// Finally, the function calls <code>updateUserData()</code> to presumably update user-related data on the server or in the app.
/// <h1>Note:</h1>
/// This function should be called whenever a device token is received in
/// <code>application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code>
/// to register the token with the AppVisor Push SDK and prepare for push notifications.
/// \param data The device token data, typically received from
/// <code>application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code> delegate method.
///
///
/// throws:
/// This function does not throw any errors.
///
/// returns:
/// No return value.
- (void)registerTokenWith:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(AVPResult * _Nonnull))completion;
/// Updates user data and sends the data to the AppVisor server.
/// This function first checks if the current device supports AppVisor Push,
/// if the app is authorized for push notifications (<code>APPVISOR_AUTHORIZED</code> user default),
/// and if the app is currently opted in to push notifications (<code>optOut == false</code>).
/// If any of these conditions is not met, the function returns without performing any further actions.
/// The function then retrieves the push token from the user defaults and decrypts it.
/// If the token is not found or cannot be decrypted, the function requests APNS.
/// The function also checks the device’s network status and determines whether it is connected
/// via WWAN, WiFi, or not connected at all.
/// Next, it gathers various device information such as locale, language, app version,
/// OS version, device type, and more, and creates a dictionary with these data.
/// Finally, it retrieves any customized attributes (up to 5) and sends all the collected data to the AppVisor server.
/// <h1>Note:</h1>
/// This function should be used whenever you want to update and send user data to the AppVisor server.
///
/// throws:
/// This function does not throw any errors.
///
/// returns:
/// No return value.
- (void)registerUserDataWithIsFromRegisterToken:(BOOL)isFromRegisterToken completion:(void (^ _Nonnull)(AVPResult * _Nonnull))completion;
/// Checks if the application can receive push notifications.
/// This function first checks if the current device supports AppVisor Push.
/// If it does not, the function returns <code>false</code>.
/// Then, the function retrieves the push notification receive status from the user defaults (<code>APPVISOR_PUSH_STATUS</code>).
/// If this status is not found or its value is not “1”, the function returns <code>false</code>. Otherwise, it returns <code>true</code>.
/// note:
///
/// Use this function when you need to check if the application is set up to receive push notifications.
///
/// returns:
/// A Boolean value indicating whether the application can receive push notifications.
/// Returns <code>true</code> if it can, <code>false</code> otherwise.
- (BOOL)canReceivePush SWIFT_WARN_UNUSED_RESULT;
- (void)isNotificationAuthorizedWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Clears the application’s icon badge number.
/// This function first checks if the application is in debug mode by using <code>AppvisorUtil.isDebugModeActive()</code>.
/// If so, it logs a message indicating that the badge number is about to be cleared.
/// Next, it retrieves the current notification settings from <code>UNUserNotificationCenter.current()</code>.
/// If the badge setting is enabled, the function clears the application’s icon badge number.
/// note:
///
/// This function should be used when you need to reset the number displayed on the application’s icon badge.
/// It will have no effect if the badge setting is not enabled.
/// requires:
/// The badge setting to be enabled in the current notification settings.
- (void)clearBadgeNumber;
/// Sets the push notification status to the desired state.
/// This function takes two parameters: <code>on</code>, a Boolean indicating whether to enable or disable push notifications,
/// and <code>completion</code>, a closure that takes a Boolean and returns Void.
/// note:
///
/// If the application is running on a device that doesn’t support push notifications,
/// or if the push status can’t be retrieved from user defaults,
/// the function immediately invokes the <code>completion</code> closure with <code>false</code> and returns.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     on: A Boolean that indicates whether push notifications should be enabled (true) or disabled (false).
///   </li>
///   <li>
///     completion: A closure to be executed once the push notification status has been updated.
///     The closure takes a single Boolean parameter indicating whether the operation was successful.
///   </li>
/// </ul>
/// The function creates a new URLSessionDataTask to send a POST request to the server, and resumes the task.
/// If the request is successful, the function updates the push status in user defaults
/// and invokes the <code>completion</code> closure with <code>true</code>.
/// If the request fails, the function invokes the <code>completion</code> closure with <code>false</code>.
- (void)setPushStatus:(BOOL)active completion:(void (^ _Nonnull)(BOOL))completion;
/// Retrieves the value for a given user property group.
/// This function retrieves the stored user property value from UserDefaults for the provided property group.
/// \param propertyGroup The index of the user property group for which the value should be retrieved.
///
///
/// returns:
/// The value stored in the user property group as a string.
/// If the property group does not contain a value, the function returns <code>nil</code>.
- (NSString * _Nullable)getUserPropertyForGroup:(NSInteger)propertyGroup SWIFT_WARN_UNUSED_RESULT;
/// Sets the value for a given user property group.
/// This function stores the provided user property value in the UserDefaults for the provided property group.
/// note:
///
/// If the device does not support Appvisor, this function immediately returns <code>true</code> without performing any operations.
/// If the provided property value is <code>nil</code>, the function removes the existing value from the user property group.
/// If the provided property value matches the existing value in the user property group, the function returns <code>true</code> without performing any operations.
/// \param propertyValue The value to be stored in the user property group as a string.
///
/// \param propertyGroup The user property group index in which the value should be stored.
///
///
/// returns:
/// A Boolean value indicating whether the operation was successful.
/// Returns <code>false</code> if the operation failed or if the provided property value is not a string.
/// Returns <code>true</code> if the operation was successful, or if the provided property value matches the existing value in the user property group.
- (BOOL)setUserProperty:(NSString * _Nullable)propertyValue forGroup:(NSInteger)propertyGroup SWIFT_WARN_UNUSED_RESULT;
/// Synchronizes user properties with the server.
/// This function collects user properties stored in UserDefaults and sends them to the server.
/// The function handles properties differently depending on whether they are special properties or not.
/// Special properties are sent as an array of strings while others are sent as single strings.
/// If there are no changes in user properties, the function will not communicate with the server.
/// After successfully sending the data, the function resets the change status in UserDefaults.
/// This method uses the HTTP POST method to send data to the server and requires the internet to function correctly.
/// In case of a failure in creating the URL request or in the URLSession data task,
/// the function will catch the error and it can be handled as required.
/// This method should be called when the app starts and whenever a user property is changed.
/// note:
/// The <code>@objc</code> attribute makes the method accessible from Objective-C and allows it to be used as a selector.
- (void)synchronizeUserPropertiesWithCompletion:(void (^ _Nonnull)(AVPResult * _Nonnull))completion;
/// Fetches notices based on an optional <code>messageID</code> and <code>userUUID</code>.
/// This function sends a network request to retrieve notices. If both <code>messageID</code> and <code>userUUID</code> are provided,
/// it adds a <code>lastKey</code> parameter to the request with the desired structure. If the running device isn’t supported
/// or if opt-out is enabled, it returns a default or empty <code>Notices</code> object.
/// note:
///
/// If <code>AppvisorUtil.isDebugModeActive()</code> is enabled, this function will print debug messages to the console.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     messageID: An optional string representing the message ID to be used in the <code>lastKey</code> parameter.
///     If nil, <code>lastKey</code> won’t be constructed.
///   </li>
///   <li>
///     userUUID: An optional string representing the user UUID to be used in the <code>lastKey</code> parameter.
///     If nil, <code>lastKey</code> won’t be constructed.
///   </li>
///   <li>
///     completion: A closure that is called when the network request completes.
///     Returns a <code>Notices</code> object which may be the fetched data or a default object in case of errors or unsupported devices.
///   </li>
/// </ul>
/// Example usage:
/// \code
/// getNotices(with: "2", and: "22") { notices in
/// print(notices.message)
/// }
///
/// \endcode
/// returns:
///
/// Nothing. The result is returned through the <code>completion</code> closure.
- (void)getNoticesWith:(NSString * _Nullable)messageID and:(NSString * _Nullable)userUUID completion:(void (^ _Nonnull)(AVPResult * _Nonnull, AVPNoticesResponse * _Nullable))completion;
/// Marks a specific notice as read on the backend.
/// note:
///
/// If <code>AppvisorUtil.isDebugModeActive()</code> is enabled, this function will print debug messages to the console.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     id: The unique identifier of the notice to be marked as read.
///   </li>
/// </ul>
- (void)setNoticeReadWith:(NSInteger)id completion:(void (^ _Nonnull)(AVPResult * _Nonnull))completion;
+ (NSString * _Nonnull)appvisorUDID SWIFT_WARN_UNUSED_RESULT;
@end

@class NSCoder;
@class WKWebView;
@class WKNavigationAction;
@class NSBundle;
SWIFT_CLASS("_TtC11AppVisorSDK23AppvisorCustomAlertView")
@interface AppvisorCustomAlertView : UIViewController <WKNavigationDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

/// A class responsible for handling in-app messaging within the AppVisorSDK.
/// The <code>AppvisorInAppMessaging</code> class provides methods to fetch and display in-app messages.
SWIFT_CLASS("_TtC11AppVisorSDK22AppvisorInAppMessaging")
@interface AppvisorInAppMessaging : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UNNotificationAction;
@class NSDateComponents;
SWIFT_CLASS("_TtC11AppVisorSDK17AppvisorLocalPush")
@interface AppvisorLocalPush : NSObject
/// Schedules a local notification with the specified parameters.
/// This function schedules a local notification with the given identifier, content, time interval, and repeat settings.
/// \param identifier A unique identifier for the notification request.
///
/// \param content The content of the notification, including title, subtitle, body, and other properties.
///
/// \param timeInterval The time interval after which the notification should be delivered.
///
/// \param repeats A Boolean value indicating whether the notification should be repeated.
///
- (void)scheduleNotificationWith:(NSString * _Nonnull)identifier content:(UNMutableNotificationContent * _Nonnull)content timeInterval:(NSTimeInterval)timeInterval repeats:(BOOL)repeats;
/// Schedules a local notification with the specified parameters and actions.
/// This function schedules a local notification with the given actions, identifier, content, time interval, and repeat settings.
/// \param actions An array of <code>UNNotificationAction</code> objects representing the actions associated with the notification.
///
/// \param identifier A unique identifier for the notification request.
///
/// \param content The content of the notification, including title, subtitle, body, and other properties.
///
/// \param timeInterval The time interval after which the notification should be delivered.
///
/// \param repeats A Boolean value indicating whether the notification should be repeated.
///
- (void)scheduleNotificationWith:(NSArray<UNNotificationAction *> * _Nonnull)actions identifier:(NSString * _Nonnull)identifier content:(UNMutableNotificationContent * _Nonnull)content timeInterval:(NSTimeInterval)timeInterval repeats:(BOOL)repeats;
/// Schedules a weekly local notification with the specified parameters.
/// This function schedules a local notification with the given date components, content, identifier, and repeat settings.
/// \param date The date components that specify when the notification should be delivered (e.g., day, hour, minute).
///
/// \param content The content of the notification, including title, subtitle, body, and other properties.
///
/// \param identifier A unique identifier for the notification request.
///
/// \param repeats A Boolean value indicating whether the notification should be repeated weekly.
///
- (void)scheduleWeeklyNotificationWith:(NSDateComponents * _Nonnull)date content:(UNMutableNotificationContent * _Nonnull)content identifier:(NSString * _Nonnull)identifier repeats:(BOOL)repeats;
/// Schedules a weekly local notification with the specified parameters and actions.
/// This function schedules a local notification with the given actions, identifier, date components, content, and repeat settings.
/// \param actions An array of <code>UNNotificationAction</code> objects representing the actions associated with the notification.
///
/// \param identifier A unique identifier for the notification request.
///
/// \param date The date components that specify when the notification should be delivered (e.g., day, hour, minute).
///
/// \param content The content of the notification, including title, subtitle, body, and other properties.
///
/// \param repeats A Boolean value indicating whether the notification should be repeated weekly.
///
- (void)scheduleWeeklyNotificationWith:(NSArray<UNNotificationAction *> * _Nonnull)actions identifier:(NSString * _Nonnull)identifier date:(NSDateComponents * _Nonnull)date content:(UNMutableNotificationContent * _Nonnull)content repeats:(BOOL)repeats;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
SWIFT_CLASS_NAMED("DynamoDBAttributeValue")
@interface DynamoDBAttributeValue : NSObject
@property (nonatomic, readonly, copy) NSData * _Nullable B;
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nullable BS;
@property (nonatomic, readonly, copy) NSArray<DynamoDBAttributeValue *> * _Nullable L;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, DynamoDBAttributeValue *> * _Nullable M;
@property (nonatomic, readonly, copy) NSString * _Nullable N;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable NS;
@property (nonatomic, readonly, copy) NSString * _Nullable S;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable SS;
@property (nonatomic, strong) NSNumber * _Nullable boolValue;
@property (nonatomic, strong) NSNumber * _Nullable isNull;
- (nonnull instancetype)initWithB:(NSData * _Nullable)B boolValue:(NSNumber * _Nullable)boolValue BS:(NSArray<NSData *> * _Nullable)BS L:(NSArray<DynamoDBAttributeValue *> * _Nullable)L M:(NSDictionary<NSString *, DynamoDBAttributeValue *> * _Nullable)M N:(NSString * _Nullable)N NS:(NSArray<NSString *> * _Nullable)NS isNull:(NSNumber * _Nullable)isNull S:(NSString * _Nullable)S SS:(NSArray<NSString *> * _Nullable)SS OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
